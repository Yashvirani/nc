{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Yash\\\\Desktop\\\\react\\\\netflix\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Yash\\\\Desktop\\\\react\\\\netflix\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\Yash\\\\Desktop\\\\react\\\\netflix\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import axios from\"../../axios\";import\"./Row.css\";import Youtube from\"react-youtube\";import movieTrailer from\"movie-trailer\";var baseUrl=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;console.log(request.data.results);setMovies(request.data.results);return _context.abrupt(\"return\",request);case 6:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);console.log(movies);var opts={height:\"390\",width:\"300\",playerVars:{// https://developers.google.com/youtube/player_parameters\nautoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl(\"\");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get(\"v\"));//see any youtube url\n}).catch(function(err){return console.log(err);});}};return/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"h2\",null,title),/*#__PURE__*/React.createElement(\"div\",{className:\"row__posters\"},movies.map(function(movie){return/*#__PURE__*/React.createElement(\"img\",{key:movie.id,onClick:function onClick(){return handleClick(movie);},src:\"\".concat(baseUrl).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name,className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\")});})),trailerUrl&&/*#__PURE__*/React.createElement(Youtube,{videoId:trailerUrl,opts:opts}));}export default Row;","map":{"version":3,"sources":["C:/Users/Yash/Desktop/react/netflix/src/components/Row/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","baseUrl","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","console","log","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","err","map","id","poster_path","backdrop_path"],"mappings":"yeAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CACA,GAAMC,CAAAA,OAAO,CAAG,sCAAhB,CAEA,QAASC,CAAAA,GAAT,MAA8C,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAxBC,QAAwB,MAAxBA,QAAwB,CAAdC,UAAc,MAAdA,UAAc,eAChBT,QAAQ,CAAC,EAAD,CADQ,wCACrCU,MADqC,eAC7BC,SAD6B,8BAERX,QAAQ,CAAC,EAAD,CAFA,yCAErCY,UAFqC,eAEzBC,aAFyB,eAG5CZ,SAAS,CAAC,UAAM,SACCa,CAAAA,SADD,qIACd,qKACwBZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CADxB,QACQQ,OADR,eAEEC,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,IAAR,CAAaC,OAAzB,EACAT,SAAS,CAACK,OAAO,CAACG,IAAR,CAAaC,OAAd,CAAT,CAHF,gCAISJ,OAJT,wDADc,4CAOdF,SAAS,GACV,CARQ,CAQN,CAACN,QAAD,CARM,CAAT,CASAS,OAAO,CAACC,GAAR,CAAYR,MAAZ,EAEA,GAAMW,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,KADG,CAEXC,KAAK,CAAE,KAFI,CAGXC,UAAU,CAAE,CACV;AACAC,QAAQ,CAAE,CAFA,CAHD,CAAb,CASA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC7B,GAAIf,UAAJ,CAAgB,CACdC,aAAa,CAAC,EAAD,CAAb,CACD,CAFD,IAEO,CACLT,YAAY,CAAC,CAAAuB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAe,EAAhB,CAAZ,CACGC,IADH,CACQ,SAACC,GAAD,CAAS,CACb,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACArB,aAAa,CAACkB,SAAS,CAAChB,GAAV,CAAc,GAAd,CAAD,CAAb,CAAmC;AACpC,CAJH,EAKGoB,KALH,CAKS,SAACC,GAAD,QAASnB,CAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAZ,CAAT,EALT,EAMD,CACF,CAXD,CAaA,mBACE,2BAAK,SAAS,CAAC,KAAf,eACE,8BAAK7B,KAAL,CADF,cAEE,2BAAK,SAAS,CAAC,cAAf,EACGG,MAAM,CAAC2B,GAAP,CAAW,SAACV,KAAD,qBACV,2BACE,GAAG,CAAEA,KAAK,CAACW,EADb,CAEE,OAAO,CAAE,yBAAMZ,CAAAA,WAAW,CAACC,KAAD,CAAjB,EAFX,CAGE,GAAG,WAAKtB,OAAL,SACDI,UAAU,CAAGkB,KAAK,CAACY,WAAT,CAAuBZ,KAAK,CAACa,aADtC,CAHL,CAME,GAAG,CAAEb,KAAK,CAACC,IANb,CAOE,SAAS,uBAAiBnB,UAAU,EAAI,kBAA/B,CAPX,EADU,EAAX,CADH,CAFF,CAeGG,UAAU,eAAI,oBAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAES,IAApC,EAfjB,CADF,CAmBD,CAED,cAAef,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"../../axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      console.log(request.data.results);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  console.log(movies);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"300\",\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\")); //see any youtube url\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            src={`${baseUrl}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}